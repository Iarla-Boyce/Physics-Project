import numpy as np
import matplotlib.pyplot as plt
import math
f = open("galaxy.txt" , "r")
f.readline()
radius=[]
velocity=[]
deltaradius=[]
deltavelocity=[]
mass=[]
velocity1=[]
darkmatter=[]
darkmattermass=[]
velocityUncertainty=[]
velocityUnitUncertainty=[]
velocity2=[]
best_p=[]
RhoHighEst=[]
RhoLowEst=[]
valuesofuncertainty=[]
G=4.3*(10**-6)
p=100*(10**6)
CRadius=1.87
pi=3.14
start=50*(10**6)
stop=100*(10**6)
step=1*(10**6)
minchi2=10*(10**46)

for line in f:
  radius.append(float(line.split('\t')[0]))
  velocity.append(float(line.split('\t')[1]))
  deltaradius.append(float(line.split('\t')[2]))
  deltavelocity.append(float(line.split('\t')[3]))
  mass.append(float(line.split('\t')[4]))
  velocity1.append((((float(G)) * (float(line.split('\t')[4]))) / (float(line.split('\t')[0])))**(1/2))
  darkmatter.append((((float(G)) * (float(line.split('\t')[5]))) / (float(line.split('\t')[0])))**(1/2))

f.close()
t=open("galaxy.txt" , "r")
t.readline()
for line in t:
  velMean=(np.sum(velocity)/53)
  velocityUnitUncertainty.append(((float(line.split("\t")[1]))-velMean)**2)
velUncertainty=(np.sum(velocityUnitUncertainty)/(52))**0.5

for slope in np.arange(start, stop, step):
  count=0
  for i in radius:
    best_p.append( ((velocity[count]-(  (np.power(((float(G)) * ((float(line.split("\t")[4]))+(4*pi*slope*(CRadius**2)*((float(line.split("\t")[0]))-(CRadius*(math.atan(float(line.split("\t")[0])/CRadius)))))) / (float(line.split("\t")[0]))),1/2))  ))**2) / ((velUncertainty)**2) )
    count+=1
  chi2=np.sum(best_p)
  best_p=[]
  if(chi2<minchi2):
    minchi2=chi2
    minslope=slope
  elif int(chi2)==int(minchi2)+1:
    valuesofuncertainty.append(slope)
    uncertaintyValue=slope
print("The uncertainties are:",valuesofuncertainty)
print("The chosen value is",uncertaintyValue)
offset=uncertaintyValue-minslope
RhoLow=minslope-offset
RhoHigh=minslope+offset
print(RhoLow,RhoHigh)


print("Optimised slope value:",minslope,"\n")
t.close()
w=open("galaxy.txt" , "r")
w.readline()
for line in w:
  velocity2.append(np.power(((float(G)) * ((float(line.split("\t")[4]))+(4*pi*minslope*(CRadius**2)*((float(line.split("\t")[0]))-(CRadius*(math.atan(float(line.split("\t")[0])/CRadius)))))) / (float(line.split("\t")[0]))),1/2))
  RhoHighEst.append(np.power(((float(G)) * ((float(line.split("\t")[4]))+(4*pi*RhoLow*(CRadius**2)*((float(line.split("\t")[0]))-(CRadius*(math.atan(float(line.split("\t")[0])/CRadius)))))) / (float(line.split("\t")[0]))),1/2))
  RhoLowEst.append(np.power(((float(G)) * ((float(line.split("\t")[4]))+(4*pi*RhoHigh*(CRadius**2)*((float(line.split("\t")[0]))-(CRadius*(math.atan(float(line.split("\t")[0])/CRadius)))))) / (float(line.split("\t")[0]))),1/2))

w.close
a=open('darkmatter.txt' , 'r')
a.readline()
for line in a:
  darkmattermass.append(float(line.split('\t')[0]))

visibleMass=((np.sum(mass))/(np.sum(darkmattermass)+np.sum(mass)))*100
print("Percentage of galactic mass that is visible:",visibleMass,"%")

x=np.array(radius)
y=np.array(velocity)
z=np.array(velocity1)
q=np.array(darkmatter)
p=np.array(velocity2)
v=np.array(RhoHighEst)
u=np.array(RhoLowEst)

plt.plot(x,y, label='Measured Velocity')
plt.plot(x,z, label='Velocity of Visible Mass')
plt.plot(x,q, label= 'Velocity of Combined Mass')
plt.plot(x,p, label= 'Combined Velocity adjusted with Rho0')
plt.plot(x,v, label= 'Combined Velocity High Rho Estimate')
plt.plot(x,u, label= 'Combined Velocity Low Rho Estimate')
plt.xlabel('Radius(kpc)')
plt.ylabel('Velocity(km/s)')
plt.legend()
plt.show()
